---
title: 'Fundamental concepts - Passenger + Ruby basics'
section: basics
subsection: fundamental_concepts
sidebar: _toc.html
---
# Fundamental concepts

<p class="lead">We give you a basic understanding of what Passenger is. We also explain how Passenger fits in the stack and how it compares to other software that you may use.</p>

**Table of contents**

<ol class="toc-container"><li>Loading...</li></ol>

## In a nutshell

Phusion Passenger is an open source **web application server**. It handles HTTP requests, manages processes and resources, and enables administration, monitoring and problem diagnosis.

Passenger is very easy to use, makes deploying in production much easier and is scalable. If you aren't already familiar with the benefits, you can [learn more about them](https://www.phusionpassenger.com/#about).

Passenger supports [multiple programming languages](<%= url_for "/walkthroughs/basics/index.html" %>), of which Ruby is one. Passenger can also serve multiple applications at the same time (it is multitenant).

## Passenger and "rails server"

The Ruby on Rails framework provides a builtin server tool, which you can access with the `rails server` command. The "rails server" is not an application server by itself, but just a small wrapper that launches your application in an application server. This is why people do not use "rails server" in production. They use an application server -- such as Passenger -- directly.

"rails server" uses [WEBrick](http://ruby-doc.org/stdlib-2.2.0/libdoc/webrick/rdoc/WEBrick.html) by default. This is the builtin Ruby HTTP server, but it isn't a good choice for production because it's slow.

If you add Passenger to your Gemfile, then "rails server" will launch Passenger instead of WEBrick. You can also choose to launch Passenger directly.

## How Passenger fits in the stack

When you deploy your web app to production, there are all sorts of components involved. You may have heard of Unicorn, Puma, Nginx, Apache and Capistrano. Passenger replaces some components, while collaborating with other components.

In a typical production stack, one would use Nginx or Apache as the web server, Passenger as application server, and Capistrano as release automation tool. Passenger integrates with Nginx or Apache and manages the application and its resources.

<figure>
  <img src="<%= url_for 'stack.png' %>">
  <figcaption>Passenger integrates with Nginx/Apache, allows the app to speak HTTP and manages the app's processes and resources. Capistrano automates releases.</figcaption>
</figure>

### Nginx and Apache

Nginx and Apache are web servers. They provide HTTP transaction handling and serve static files. However, they are not Ruby application servers and cannot run Ruby applications directly. That is why Nginx and Apache are used in combination with an application server, such as Passenger.

Application servers make it possible for Ruby apps to speak HTTP. Ruby apps (and frameworks like Rails) can't do that by themselves. On the other hand, application servers typically aren't as good as Nginx and Apache at handling HTTP requests. The devil is in the details: Nginx and Apache are better at handling I/O security, HTTP concurrency management, connection timeouts, etc. That's why, in production environments, application servers are used in combination with Nginx or Apache.

### Capistrano

Capistrano is an application release automation tool. When releasing a new version of your web application, there are actions that need to be performed, such as uploading your application code to your servers, running a command to install your gem bundle, restarting processes, etc. Capistrano allows you to automate these actions.

Capistrano is not a server that provides HTTP transaction handling, so it does not replace application servers or web servers. Instead, you are supposed to use Capistrano in combination with them. For example, Capistrano scripts typically contain instructions to restart the application server after a new application version has been released.

### Unicorn and Puma

Unicorn and Puma are alternative application servers. Passenger replaces Unicorn and Puma.

Passenger's feature set is very different from those of Unicorn and Puma. In particular, Passenger has a stronger focus on ease of use, integration with other components, automatic management and enabling problem diagnosis. For example, Passenger can integrate with Nginx and Apache in order to reduce setup work, and provides tools for easy problem diagnosis.

## Multiple integration modes

<%= render_partial("../shared/integration_modes.md", locals: { context: :basics, language_type: :ruby }) %>

## What Passenger does not do

Passenger does many things, but some things are currently out of scope.

 * **Setting up a server with an operating system**<br>
   Passenger assumes that you already have a server with an working operating system on it. Passenger is not a hosting service. It is software that is to be installed on a server.<br>
   However, the Passenger Library contains excellent [documentation on setting up a server](<%= url_for "/walkthroughs/deploy/ruby/index.html" %>).
 * **Installing Ruby**<br>
   To run Ruby apps on Passenger, you must already have Ruby installed. Passenger does not do that for you. Passenger does not care how you install Ruby though; you sometimes just need to tell Passenger where Ruby is.<br>
   Having said that, the Passenger Library contains excellent [documentation on installing Ruby during a production deployment](<%= url_for "/walkthroughs/deploy/ruby/index.html" %>).
 * **Transferring the application code and files to the server**<br>
   Passenger does not transfer the application code and files to the server for you. To do this, you should use something like Capistrano. Passenger assumes that the application code and files are already on the server, and does not care which tool you use to make that so.<br>
   The Passenger Library contains documentation on [automating releases using shell scripts](<%= url_for "/deploy/automating_app_updates/index.html" %>).
 * **Installing application dependencies**<br>
   Passenger does not install your application's dependencies for you. That job belongs to Capistrano and Bundler.
 * **Managing the database**<br>
   If your application requires a database, then Passenger does not install that database for you, nor does it sets up database accounts and tables for you. They must already be set up by the time you deploy your application to Passenger.

## Next step

You now have a solid understanding of Passenger's fundamental concepts. Let us go through installing Passenger next.

<a href="installation.html" class="btn btn-primary btn-lg">Continue &raquo;</a>
