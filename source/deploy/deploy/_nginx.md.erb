**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

<% if language_type == :ruby %>
  <h2 id="determine_ruby_command">Determine the Ruby command that Passenger should use</h2>

  <p>
    Before you begin, you need to tell Passenger which Ruby command it should use to run your app, just in case there are <a href="<%= url_for "/indepth/ruby/multiple_rubies.html" %>">multiple Ruby interpreters on your system</a>. Please run <code>passenger-config about ruby-command</code> to find out which Ruby interpreter you are using. For example:
  </p>
  <pre class="highlight"><span class="prompt">$ </span><%= passenger_command_prefix(locals) %>passenger-config about ruby-command
<span class="output">passenger-config was invoked through the following Ruby interpreter:
  Command: /usr/local/rvm/gems/ruby-<%= LATEST_RUBY_VERSION %>/wrappers/ruby
  Version: ruby <%= LATEST_RUBY_VERSION %>p85 (2015-02-26 revision 49769) [x86_64-linux]
  ...</span></pre>

  Please take note of the path after "Command" (in this example, `/usr/local/rvm/gems/ruby-<%= LATEST_RUBY_VERSION %>/wrappers/ruby`). You will need it in one of the next steps.
<% end %>


## Deploying an app to a virtual host's root

To deploy an app to an Nginx virtual host's root path, the following steps must be taken:

 * Add a virtual host entry (`server` block) to your Nginx configuration file.
 * The `server` block's root must point to your application's `public` subdirectory.
 * You must also set `passenger_enabled on` in the `server` block.

Here is an example:

<% if language_type == :ruby %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/path-to-app</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    passenger_ruby <span class="o">/path-to-ruby</span>;
}</pre>

  Replace `yourserver.com` with your server's host name, and replace `/path-to-app` with your application's code directory path. However, make sure that Nginx is configured to point to the `public` subdirectory inside it!

  Replace `/path-to-ruby` with the Ruby command that you obtained in [Determine the Ruby command that Passenger should use](#determine_ruby_command).
<% elsif language_type == :nodejs %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/path-to-app</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is a Node.js app</span>
    passenger_app_type node;
    passenger_startup_file <span class="o">app.js</span>;
}</pre>

  Replace `yourserver.com` with your server's host name, replace `/path-to-app` with your application's code directory path and replace `app.js` with your app's entry point file.
<% elsif language_type == :meteor %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/path-to-app-package</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
    <span class="c"># Tell Passenger that your app is a Meteor app</span>
    passenger_app_type node;
    passenger_startup_file main.js;

    <span class="c"># Tell your app where MongoDB is</span>
    passenger_env_var MONGO_URL mongodb://localhost:27017/<span class="o">myappdb</span>;
    <span class="c"># Tell your app what its root URL is</span>
    passenger_env_var ROOT_URL <span class="o">http://yourserver.com</span>;
}</pre>

  Replace `yourserver.com` with your server's host name and replace `/path-to-app-package` with your application's package directory path. Replace `myappdb` with an appropriate MongoDB database name. Also be sure to set `ROOT_URL` to an appropriate value.
<% else %>
  <pre class="highlight">server {
    listen 80;
    server_name <span class="o">yourserver.com</span>;

    <span class="c"># Tell Nginx and Passenger where your app's 'public' directory is</span>
    root <span class="o">/path-to-app</span>/public;

    <span class="c"># Turn on Passenger</span>
    passenger_enabled on;
}</pre>

  Replace `yourserver.com` with your server's host name, and replace `/path-to-app` with your application's code directory path. However, make sure that Nginx is configured to point to the `public` subdirectory inside it!
<% end %>

When you are done, restart Nginx. If you installed Nginx via our Debian or RPM packages:

<pre class="highlight"><span class="prompt">$ </span>sudo service nginx restart</pre>

Otherwise, if you installed Nginx from source and don't have an init script:

  <pre class="highlight"><span class="prompt">$ </span>sudo <span class="nb">kill</span> <span class="k">$(</span>cat /opt/nginx/logs/nginx.pid<span class="k">)</span>
<span class="prompt">$ </span>sudo /opt/nginx/sbin/nginx</pre>

You are now done. If you run into any problems, please refer to the [troubleshooting guide](<%= url_for "/admin/nginx/troubleshooting/index.html" %>).


## Deploying an app to a sub-URI

<% if language_type == :nodejs %>
<div class="note">
Sub-URI deployments in Node.js require framework-specific adjustments in the application. For example, in Express 4.0+, you should <a href="http://expressjs.com/api#app.mountpath">use a router</a>.
An alternative is to use url rewriting to avoid the need for sub-URIs altogether.
</div>
<% end %>
You can also deploy an app to a sub-URI instead of the root URI. For example, suppose that you already have a virtual host for the application `/websites/phusion`:

~~~nginx
http {
    ...

    server {
        listen 80;
        server_name www.phusion.nl;
        root /websites/phusion/public;
        passenger_enabled on;
    }
}
~~~

And you want your application, located in `/websites/secondapp`, to be accessible from the URL `http://www.phusion.nl/subpath`. To do this, you need to perform the following:

 * Create a location with parameter `~ ^/<SUBURI>(/.*|$)`. This is a regular expression that says: "match everything that is exactly <SUBURI>, or starts with <SUBDURI>/".
 * Inside the location block, set `alias <PATH TO YOUR APPLICATION PUBLIC SUBDIRECTORY>$1`.
 * Inside the location block, set `passenger_base_uri <SUBURI>`.
 * Inside the location block, set `passenger_app_root <PATH TO YOUR APPLICATION ROOT>`.
 * Inside the location block, set `passenger_document_root <PATH TO YOUR APPLICATIOS PUBLIC SUBDIRECTORY>`.
 * Inside the location block, set `app_type` and `startup_file` accordingly.

Here is an example:

~~~nginx
http {
    ...

    server {
        listen 80;
        server_name www.phusion.nl;
        root /websites/phusion/public;
        passenger_enabled on;

        # This block has been added.
        location ~ ^/subpath(/.*|$) {
            alias /websites/secondapp/public$1;  # <-- be sure to point to 'public'!
            passenger_base_uri /subpath;
            passenger_app_root /websites/secondapp;
            passenger_document_root /websites/secondapp/public;
            passenger_enabled on;

            <% if language_type == :python %>
            passenger_app_type wsgi;
            passenger_startup_file passenger_wsgi.py;
            <% elsif language_type == :nodejs %>
            passenger_app_type node;
            passenger_startup_file app.js;
            <% elsif language_type == :meteor %>
            passenger_app_type node;
            passenger_startup_file main.js;
            <% end %>
        }
    }
}
~~~

When you are done, restart Nginx. If you installed Nginx via our Debian or RPM packages:

<pre class="highlight"><span class="prompt">$ </span>sudo service nginx restart</pre>

Otherwise, if you installed Nginx from source and don't have an init script:

  <pre class="highlight"><span class="prompt">$ </span>sudo <span class="nb">kill</span> <span class="k">$(</span>cat /opt/nginx/logs/nginx.pid<span class="k">)</span>
<span class="prompt">$ </span>sudo /opt/nginx/sbin/nginx</pre>

You are now done. If you run into any problems, please refer to the [troubleshooting guide](<%= url_for "/admin/nginx/troubleshooting/index.html" %>).
