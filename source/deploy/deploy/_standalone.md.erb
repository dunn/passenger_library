**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

## Step 1: create a Passenger config file

Since this is a production environment, we need to customize Passenger a little bit. Create a file named `Passengerfile.json` in your application's directory:

<pre class="highlight javascript"><span class="p">{</span>
<% if language_type == :python -%>
  <span class="c1">// Tell Passenger that this is a <%= language_name %> app.</span>
  <span class="c1">// Replace "passenger_wsgi.py" with your app's WSGI entry point file.</span>
  <span class="s2">"app_type"</span><span class="p">:</span> <span class="s2">"wsgi"</span><span class="p">,</span>
  <span class="s2">"startup_file"</span><span class="p">:</span> <span class="o">"passenger_wsgi.py"</span><span class="p">,</span>
<% elsif language_type == :nodejs -%>
  <span class="c1">// Tell Passenger that this is a <%= language_name %> app.</span>
  <span class="c1">// Replace "app.js" with your app's entry point file.</span>
  <span class="s2">"app_type"</span><span class="p">:</span> <span class="s2">"node"</span><span class="p">,</span>
  <span class="s2">"startup_file"</span><span class="p">:</span> <span class="o">"app.js"</span><span class="p">,</span>
<% elsif language_type == :meteor -%>
  <span class="c1">// Tell Passenger that this is a <%= language_name %> app.</span>
  <span class="s2">"app_type"</span><span class="p">:</span> <span class="s2">"node"</span><span class="p">,</span>
  <span class="s2">"startup_file"</span><span class="p">:</span> <span class="s2">"main.js"</span><span class="p">,</span>
  <span class="s2">"envvars"</span><span class="p">:</span> <span class="p">{</span>
    <span class="c1">// Tell your app where MongoDB is</span>
    <span class="s2">"MONGO_URL"</span><span class="p">:</span> <span class="s2">"mongodb://localhost:27017/<span class="o">myappdb</span>"</span><span class="p">,</span>
    <span class="c1">// Tell your app what its root URL is</span>
    <span class="s2">"ROOT_URL"</span><span class="p">:</span> <span class="s2">"<span class="o">http://yourserver.com</span>"</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="c1">// Store log and PID file somewhere outside the package directory</span>
  <span class="s2">"log_file"</span><span class="p">:</span> <span class="s2">"<span class="o">../passenger.log</span>"</span>,
  <span class="s2">"pid_file"</span><span class="p">:</span> <span class="s2">"<span class="o">../passenger.pid</span>"</span>
<% end -%>
  <span class="c1">// Run the app in a production environment. The default value is "development".</span>
  <span class="s2">"environment"</span><span class="p">:</span> <span class="s2">"production"</span><span class="p">,</span>
  <span class="c1">// Run Passenger on the given port. In this example, we use port 80,</span>
  <span class="c1">// the standard HTTP port.</span>
  <span class="s2">"port"</span><span class="p">:</span> <span class="mi">80</span><span class="p">,</span>
  <span class="c1">// Tell Passenger to daemonize into the background.</span>
  <span class="s2">"daemonize"</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
  <span class="c1">// Tell Passenger to run the app as the given user. Only has effect</span>
  <span class="c1">// if Passenger was started with root privileges.</span>
  <span class="s2">"user"</span><span class="p">:</span> <span class="s2">"<span class="o">myappuser</span>"</span>
<span class="p">}</span></pre>

In the above configuration example, we instructed Passenger to run on port 80. If you don't already have a server running on port 80, then leave it at 80 so that Passenger listens on the default HTTP port directly (which is safe).

But if you already have a web server running on port 80, then you may be interested in installing Passenger Standalone behind that web server through a reverse proxy. We'll cover that later. For now, specify a random unused port that is not 80.

Also:

 * Replace `myappuser` with the name of the user account that you wish to run your app under.
<% if language_type == :meteor %>
 * Replace `myappdb` with an appropriate MongoDB database name.
 * Set `ROOT_URL` to an appropriate value.
<% end %>

When you are done with all this, commit this file to version control and transfer it to your server.


## Step 2: start Passenger Standalone

While in your application's code directory, start Passenger. As configured, Passenger will daemonize into the background.

The reason why we prefix the command with `sudo` is because, in the Passengerfile.json example, we configured Passenger to listen on port 80. Only root privileged processes can listen on ports lower than 1024. If in the previous step you did not configure port 80, then you do not have to prefix the command with sudo.

<% if language_type == :ruby %>
  <pre class="highlight"><span class="prompt">$ </span>cd /path-to-your-app
<span class="prompt">$ </span>sudo <%= passenger_command_prefix(locals) %>passenger start</pre>

  <div class="note">
    Using RVM? Then use <code>rvmsudo</code> instead of <code>sudo</code>.
  </div>
<% else %>
  <pre class="highlight"><span class="prompt">$ </span>cd /path-to-your-app
<span class="prompt">$ </span>sudo <%= passenger_command_prefix(locals) %>passenger start</pre>
<% end %>


## Step 3: install reverse proxy (if applicable)

Did you configure Passenger on port 80 in step 1? If so, then you can skip to step 4.

Did you choose to configure Passenger on another port? Then please read [Putting Passenger Standalone behind an Nginx or Apache reverse proxy](<%= url_for "/deploy/standalone/reverse_proxy.html" %>).


## Step 4: make sure Passenger Standalone starts on system boot

Passenger is now running and serving your app, but that only lasts until you reboot your server. So you must configure your server to start Passenger Standalone on system boot.

<!-- NOTE: Making /etc/rc.local executable is necessary on Red Hat 7, where it is disabled by default because of the lack of executable bit. -->

The easiest way to do that is to add it to the file `/etc/rc.local`. This script is called during system boot. Ensure that it's executable and open it in a text editor:

<pre class="highlight"><span class="prompt">$ </span>sudo chmod +x /etc/rc.local
<span class="prompt">$ </span>sudo nano /etc/rc.local</pre>

Here is an example of what you may want to add to `/etc/rc.local`. If there is an `exit` command in rc.local, make sure you add these before the exit command.

<pre class="highlight">
<% if locals[:os_config_type] == :tarball %>
<span class="c"># Since you installed Passenger from tarball, add its `bin` directory to PATH.</span>
<span class="nb">export</span> <span class="nv">PATH</span>=<span class="o">/path-to-passenger</span>/bin:<span class="nv">$PATH</span>

<% end -%>
<span class="c"># Change working directory to your webapp.</span>
<span class="nb">cd</span> /path-to-your-app

<span class="c"># Start Passenger Standalone in daemonized mode. Passenger will be started as
# root when run from this file, but Passengerfile.json tells it to drop its
# privileges to a normal user.</span>
<% if language_type == :ruby -%>
<%= passenger_command_prefix(locals) %>passenger start</span>

<span class="c"># Or, if you are using RVM, use something like this.
# Replace '<%= LATEST_RUBY_VERSION %>' with the Ruby version you want your app to run under.
#/usr/local/rvm/bin/rvm-exec ruby-<%= LATEST_RUBY_VERSION %> \
#  <%= passenger_command_prefix(locals) %>passenger start</span>
<% else -%>
<%= passenger_command_prefix(locals) %>passenger start
<% end -%>
</pre>
