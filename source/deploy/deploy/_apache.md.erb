**Table of contents**

<ul class="toc-container"><li>Loading...</li></ul>

<% if language_type == :ruby %>
  <h2 id="determine_ruby_command">Determine the Ruby command that Passenger should use</h2>

  <p>
    We need to tell Passenger which Ruby command it should use to run your app, just in case there are <a href="<%= url_for "/indepth/ruby/multiple_rubies.html" %>">multiple Ruby interpreters on your system</a>. Please run <code>passenger-config about ruby-command</code> to find out which Ruby interpreter you are using. For example:
  </p>
  <pre class="highlight"><span class="prompt">$ </span><%= passenger_command_prefix(locals) %>passenger-config about ruby-command
<span class="output">passenger-config was invoked through the following Ruby interpreter:
  Command: /usr/local/rvm/gems/ruby-<%= LATEST_RUBY_VERSION %>/wrappers/ruby
  Version: ruby <%= LATEST_RUBY_VERSION %>p85 (2015-02-26 revision 49769) [x86_64-linux]
  ...</span></pre>

  Please take note of the path after "Command" (in this example, `/usr/local/rvm/gems/ruby-<%= LATEST_RUBY_VERSION %>/wrappers/ruby`). You will need it in one of the next steps.
<% end %>


## Deploying an app to a virtual host's root

To deploy an app to an Apache virtual host's root path, the following steps must be taken:

 * Add a virtual host entry to your [Apache configuration file](<%= url_for "/install/apache/working_with_the_apache_config_file.html" %>).
 * The virtual host's document root must point to your application's public subdirectory.
 * The Apache per-directory permissions must allow access to this directory.
 * MultiViews must be disabled for this directory.

Here is an example:

<% if language_type == :ruby %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's 'public' directory is</span>
    DocumentRoot <span class="o">/path-to-your-app</span>/public

    PassengerRuby <span class="o">/path-to-ruby</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/path-to-your-app</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache &gt; 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, and replace `/path-to-your-app` with your application's code directory path. However, make sure that Apache is configured to point to the `public` subdirectory inside it!

  Replace `/path-to-ruby` with the Ruby command that you obtained in [Determine the Ruby command that Passenger should use](#determine_ruby_command).
<% elsif language_type == :python %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/path-to-your-app</span>/public
    PassengerAppRoot <span class="o">/path-to-your-app</span>

    <span class="c"># Tell Passenger that your app is a <%= language_name %> app</span>
    PassengerAppType python
    PassengerStartupFile <span class="o">passenger_wsgi.py</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/path-to-your-app</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache &gt;= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, replace `/path-to-your-app` with your application's code directory path and replace `passenger_wsgi.py` with your app's WSGI entry point file.
<% elsif language_type == :nodejs %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/path-to-your-app</span>/public
    PassengerAppRoot <span class="o">/path-to-your-app</span>

    <span class="c"># Tell Passenger that your app is a <%= language_name %> app</span>
    PassengerAppType node
    PassengerStartupFile <span class="o">app.js</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/path-to-your-app</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache &gt;= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, replace `/path-to-your-app` with your application's code directory path and replace `app.js` with your app's entry point file.
<% elsif language_type == :meteor %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's code directory is</span>
    DocumentRoot <span class="o">/path-to-your-app-package</span>/public
    PassengerAppRoot <span class="o">/path-to-your-app-package</span>

    <span class="c"># Tell Passenger that your app is a bundled Meteor app</span>
    PassengerAppType node
    PassengerStartupFile main.js

    <span class="c"># Tell your app where MongoDB is</span>
    SetEnv MONGO_URL mongodb://localhost:27017/<span class="o">myappdb</span>
    <span class="c"># Tell your app what its root URL is</span>
    SetEnv ROOT_URL <span class="o">http://yourserver.com</span>

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/path-to-your-app-package</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache &gt;= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name and replace `/path-to-your-app-package` with your application's package directory path. Replace `myappdb` with an appropriate MongoDB database name. Also be sure to set `ROOT_URL` to an appropriate value.
<% else %>
  <pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName <span class="o">yourserver.com</span>

    <span class="c"># Tell Apache and Passenger where your app's 'public' directory is</span>
    DocumentRoot <span class="o">/var/www/myapp/code</span>/public

    <span class="c"># Relax Apache security settings</span>
    &lt;Directory <span class="o">/var/www/myapp/code</span>/public&gt;
      Allow from all
      Options -MultiViews
      <span class="c"># Uncomment this if you're on Apache &gt;= 2.4:</span>
      <span class="c">#Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

  Replace `yourserver.com` with your server's host name, and replace `/var/www/myapp/code` with your application's code directory path. However, make sure that Apache is configured to point to the `public` subdirectory inside it!
<% end %>

When you are done, restart Apache:

<pre class="highlight"><span class="prompt">$ </span>sudo apachectl restart</pre>

(Depending on your operating system, the right command may be `apache2ctl` instead of `apachectl`.)

You are now done. If you run into any problems, please refer to the [troubleshooting guide](<%= url_for "/admin/apache/troubleshooting/index.html" %>).


## Deploying an app to a sub-URI

<% if language_type == :nodejs %>
<div class="note">
Sub-URI deployments in Node.js require framework-specific adjustments in the application. For example, in Express 4.0+, you should <a href="http://expressjs.com/api#app.mountpath">use a router</a>.
An alternative is to use url rewriting to avoid the need for sub-URIs altogether.
</div>
<% end %>
You can also deploy an app to a sub-URI instead of the root URI. For example, suppose that you already have a virtual host for the application `/websites/phusion`:

<pre class="highlight">&lt;VirtualHost *:80>
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion/public
    &lt;Directory /websites/phusion&gt;
        Allow from all
        Options -MultiViews
        <span class="c"># Uncomment this if you're on Apache &gt;= 2.4:
        #Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

And you want your application, located in `/websites/secondapp`, to be accessible from the URL `http://www.phusion.nl/subpath`. To do this, you need to perform the following:

 * Set `Alias {SUBURI} {PATH TO YOUR APPLICATION'S PUBLIC DIRECTORY}`.
 * Create a `<Location /{SUBURI}> block`.
 * Inside the Location block, set `PassengerBaseURI /{SUBURI}`.
 * Inside the Location block, set `PassengerAppRoot {PATH TO YOUR APPLICATION ROOT}`.
 * Create a `<Directory {PATH TO YOUR APPLICATION PUBLIC SUBDIRECTORY}>` block.
 * Inside the Directory block, set `Allow from all`, and (if youâ€™re on Apache >= 2.4) `Require all granted`.
 * Inside the Directory block, disable MultiViews.

Here is an example:

<pre class="highlight">&lt;VirtualHost *:80&gt;
    ServerName www.phusion.nl
    DocumentRoot /websites/phusion/public
    &lt;Directory /websites/phusion&gt;
        Allow from all
        Options -MultiViews
        <span class="c"># Uncomment this if you're on Apache >= 2.4:
        #Require all granted</span>
    &lt;/Directory&gt;

    <span class="c"># These have been added:</span>
    Alias <span class="o">/subapp</span> <span class="o">/websites/secondapp</span>/public
    &lt;Location <span class="o">/subapp</span>&gt;
        PassengerBaseURI <span class="o">/subapp</span>
        PassengerAppRoot <span class="o">/websites/secondapp</span>

        <% if language_type == :python %>
        PassengerAppType wsgi
        PassengerStartupFile <span class="o">passenger_wsgi.py</span>
        <% elsif language_type == :nodejs %>
        PassengerAppType node
        PassengerStartupFile <span class="o">app.js</span>
        <% elsif language_type == :meteor %>
        PassengerAppType node
        PassengerStartupFile <span class="o">main.js</span>
        <% end %>
    &lt;/Location&gt;
    &lt;Directory <span class="o">/websites/secondapp</span>/public&gt;
        Allow from all
        Options -MultiViews
        <span class="c"># Uncomment this if you're on Apache &gt;= 2.4:
        #Require all granted</span>
    &lt;/Directory&gt;
&lt;/VirtualHost&gt;</pre>

When you are done, restart Apache:

<pre class="highlight"><span class="prompt">$ </span>sudo apachectl restart</pre>

(Depending on your operating system, the right command may be `apache2ctl` instead of `apachectl`.)

You are now done. If you run into any problems, please refer to the [troubleshooting guide](<%= url_for "/admin/apache/troubleshooting/index.html" %>).
